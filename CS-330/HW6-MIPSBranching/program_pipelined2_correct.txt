loading instruction memory with program:
08010003 # addi 0 1 3
08420001 # addi 0 2 1
00000000 # noop
00000000 # noop
00000000 # noop
18220002 # beq 1 2 2
00000000 # noop
00000000 # noop
00000000 # noop
1400FFF5 # jump -11
00000000 # noop
00000000 # noop
00000000 # noop
10000000 # halt
SYSTEM STARTING STATE --- LOAD INSTRUCTIONS INTO MEMORY
STATE AT CYCLE: 0
	pc = 0
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 0
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 1
	pc = 1
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 8010003 ( addi 0 1 3 )
		pcPlus1 = 1
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 2
	pc = 2
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 8420001 ( addi 2 2 1 )
		pcPlus1 = 2
	ID/EX pipeline register:
		instruction = 8010003 ( addi 0 1 3 )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 3
	pc = 3
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 3
	ID/EX pipeline register:
		instruction = 8420001 ( addi 2 2 1 )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 8010003 ( addi 0 1 3 )
		aluResult = 3
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 4
	pc = 4
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 4
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 8420001 ( addi 2 2 1 )
		aluResult = 1
	MEM/WB pipeline register:
		instruction = 8010003 ( addi 0 1 3 )
		writeData = 3
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 5
	pc = 5
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 5
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 8420001 ( addi 2 2 1 )
		writeData = 1
	WB/END pipeline register:
		instruction = 8010003 ( addi 0 1 3 )
		writeData = 3
end state
STATE AT CYCLE: 6
	pc = 6
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 1
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 18220002 ( beq 1 2 2 )
		pcPlus1 = 6
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 8420001 ( addi 2 2 1 )
		writeData = 1
end state
STATE AT CYCLE: 7
	pc = 7
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 1
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 7
	ID/EX pipeline register:
		instruction = 18220002 ( beq 1 2 2 )
		readRegA = 3
		readRegB = 1
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 8
	pc = 8
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 1
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 8
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 18220002 ( beq 1 2 2 )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 9
	pc = 9
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 1
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 9
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 18220002 ( beq 1 2 2 )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 10
	pc = 10
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 1
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 1400fff5 ( jump -11 )
		pcPlus1 = 10
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 18220002 ( beq 1 2 2 )
		writeData = 0
end state
STATE AT CYCLE: 11
	pc = 11
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 1
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 11
	ID/EX pipeline register:
		instruction = 1400fff5 ( jump -11 )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 12
	pc = 12
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 1
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 12
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 1400fff5 ( jump -11 )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 13
	pc = 2
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 1
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 8420001 ( addi 2 2 1 )
		pcPlus1 = 2
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 1400fff5 ( jump -11 )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 14
	pc = 3
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 1
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 3
	ID/EX pipeline register:
		instruction = 8420001 ( addi 2 2 1 )
		readRegA = 1
		readRegB = 1
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 1400fff5 ( jump -11 )
		writeData = 0
end state
STATE AT CYCLE: 15
	pc = 4
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 1
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 4
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 8420001 ( addi 2 2 1 )
		aluResult = 2
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 16
	pc = 5
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 1
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 5
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 8420001 ( addi 2 2 1 )
		writeData = 2
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 17
	pc = 6
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 2
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 18220002 ( beq 1 2 2 )
		pcPlus1 = 6
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 8420001 ( addi 2 2 1 )
		writeData = 2
end state
STATE AT CYCLE: 18
	pc = 7
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 2
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 7
	ID/EX pipeline register:
		instruction = 18220002 ( beq 1 2 2 )
		readRegA = 3
		readRegB = 2
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 19
	pc = 8
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 2
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 8
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 18220002 ( beq 1 2 2 )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 20
	pc = 9
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 2
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 9
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 18220002 ( beq 1 2 2 )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 21
	pc = 10
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 2
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 1400fff5 ( jump -11 )
		pcPlus1 = 10
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 18220002 ( beq 1 2 2 )
		writeData = 0
end state
STATE AT CYCLE: 22
	pc = 11
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 2
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 11
	ID/EX pipeline register:
		instruction = 1400fff5 ( jump -11 )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 23
	pc = 12
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 2
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 12
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 1400fff5 ( jump -11 )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 24
	pc = 2
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 2
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 8420001 ( addi 2 2 1 )
		pcPlus1 = 2
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 1400fff5 ( jump -11 )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 25
	pc = 3
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 2
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 3
	ID/EX pipeline register:
		instruction = 8420001 ( addi 2 2 1 )
		readRegA = 2
		readRegB = 2
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 1400fff5 ( jump -11 )
		writeData = 0
end state
STATE AT CYCLE: 26
	pc = 4
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 2
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 4
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 8420001 ( addi 2 2 1 )
		aluResult = 3
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 27
	pc = 5
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 2
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 5
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 8420001 ( addi 2 2 1 )
		writeData = 3
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 28
	pc = 6
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 3
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 18220002 ( beq 1 2 2 )
		pcPlus1 = 6
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 8420001 ( addi 2 2 1 )
		writeData = 3
end state
STATE AT CYCLE: 29
	pc = 7
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 3
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 7
	ID/EX pipeline register:
		instruction = 18220002 ( beq 1 2 2 )
		readRegA = 3
		readRegB = 3
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 30
	pc = 8
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 3
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 8
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 18220002 ( beq 1 2 2 )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 31
	pc = 11
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 3
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 11
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 18220002 ( beq 1 2 2 )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 32
	pc = 12
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 3
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 12
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 18220002 ( beq 1 2 2 )
		writeData = 0
end state
STATE AT CYCLE: 33
	pc = 13
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 3
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 13
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 34
	pc = 14
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 3
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 10000000 ( halt )
		pcPlus1 = 14
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 35
	pc = 15
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 3
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 15
	ID/EX pipeline register:
		instruction = 10000000 ( halt )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 36
	pc = 16
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 3
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 16
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 10000000 ( halt )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 0 ( noop )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
STATE AT CYCLE: 37
	pc = 17
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 3
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 17
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 10000000 ( halt )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
machine halted
total of 37 cycles executed
final state of machine:
STATE AT CYCLE: 37
	pc = 17
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 3
		reg[ 2 ] = 3
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0 ( noop )
		pcPlus1 = 17
	ID/EX pipeline register:
		instruction = 0 ( noop )
		readRegA = 0
		readRegB = 0
	EX/MEM pipeline register:
		instruction = 0 ( noop )
		aluResult = 0
	MEM/WB pipeline register:
		instruction = 10000000 ( halt )
		writeData = 0
	WB/END pipeline register:
		instruction = 0 ( noop )
		writeData = 0
end state
